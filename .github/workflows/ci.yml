name: GenCI

permissions:
  contents: read
  pull-requests: write

on:
  #push:
  #  branches:
  #    - main
  #    - ci-replays
  pull_request:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  detect-changes:
    name: Detect File Changes
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      generals: ${{ steps.filter.outputs.generals }}
      generalsmd: ${{ steps.filter.outputs.generalsmd }}
      shared: ${{ steps.filter.outputs.shared }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Filter Changed Paths
        uses: dorny/paths-filter@v3
        id: filter
        with:
          token: ''
          filters: |
            generals:
              - 'Generals/**'
            generalsmd:
              - 'GeneralsMD/**'
            shared:
              - '.github/workflows/**'
              - 'CMakeLists.txt'
              - 'CMakePresets.json'
              - 'cmake/**'
              - 'Core/**'
              - 'Dependencies/**'

      - name: Changes Summary
        run: |
          echo "### 🔍 File Changes Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Generals: ${{ steps.filter.outputs.generals == 'true' && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
          echo "- GeneralsMD: ${{ steps.filter.outputs.generalsmd == 'true' && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Shared: ${{ steps.filter.outputs.shared == 'true' && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY

  build-generals:
    name: Build Generals${{ matrix.preset && '' }}
    needs: detect-changes
    if: ${{ 'false' == 'true' }}
    #if: ${{ github.event_name == 'workflow_dispatch' || needs.detect-changes.outputs.generals == 'true' || needs.detect-changes.outputs.shared == 'true' }}
    strategy:
      matrix:
        include:
          # - preset: "vc6"
          #   tools: true
          #   extras: true
          # - preset: "vc6-profile"
          #   tools: true
          #   extras: true
          # - preset: "vc6-debug"
          #   tools: true
          #   extras: true
          - preset: "win32"
            tools: true
            extras: true
          - preset: "win32-profile"
            tools: true
            extras: true
          - preset: "win32-debug"
            tools: true
            extras: true
          # vcpkg builds have been disabled for now due to excessive build times of 30 minutes per preset
          # - preset: "win32-vcpkg"
          #   tools: true
          #   extras: true
          # - preset: "win32-vcpkg-profile"
          #   tools: true
          #   extras: true
          # - preset: "win32-vcpkg-debug"
          #   tools: true
          #   extras: true
      fail-fast: false
    uses: ./.github/workflows/build-toolchain.yml
    with:
      game: "Generals"
      preset: ${{ matrix.preset }}
      tools: ${{ matrix.tools }}
      extras: ${{ matrix.extras }}
    secrets: inherit

  build-generalsmd:
    name: Build GeneralsMD${{ matrix.preset && '' }}
    needs: detect-changes
    if: ${{ github.event_name == 'workflow_dispatch' || needs.detect-changes.outputs.generalsmd == 'true' || needs.detect-changes.outputs.shared == 'true' }}
    strategy:
      matrix:
        include:
          - preset: "vc6"
            tools: false
            extras: false
          #- preset: "vc6-profile"
          #  tools: true
          #  extras: true
          - preset: "vc6-debug"
            tools: false
            extras: false
          #- preset: "win32"
          #  tools: true
          #  extras: true
          #- preset: "win32-profile"
          #  tools: true
          #  extras: true
          #- preset: "win32-debug"
          #  tools: true
          #  extras: true
          #- preset: "win32-debuglog"
          #  tools: true
          #  extras: true
          # vcpkg builds have been disabled for now due to excessive build times of 30 minutes per preset
          # - preset: "win32-vcpkg"
          #   tools: true
          #   extras: true
          # - preset: "win32-vcpkg-profile"
          #   tools: true
          #   extras: true
          # - preset: "win32-vcpkg-debug"
          #   tools: true
          #   extras: true
      fail-fast: false
    uses: ./.github/workflows/build-toolchain.yml
    with:
      game: "GeneralsMD"
      preset: ${{ matrix.preset }}
      tools: ${{ matrix.tools }}
      extras: ${{ matrix.extras }}
    secrets: inherit

  replay-test:
    name: Replay Compatibility Test (${{ matrix.preset }})
    needs: build-generalsmd
    if: ${{ github.event_name == 'workflow_dispatch' || needs.detect-changes.outputs.generalsmd == 'true' || needs.detect-changes.outputs.shared == 'true' }}
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - preset: "vc6"
            tools: false
            extras: false
          - preset: "vc6-debug"
            tools: false
            extras: false
      fail-fast: false
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Game Artifact
        uses: actions/download-artifact@v4
        with:
          name: GeneralsMD-${{ matrix.preset }}
          path: build

      - name: Cache GameData files
        id: cache-gamedata
        uses: actions/cache@v4
        with:
          path: C:\GameData
          key: gamedata-permanent-cache-v1

      - name: Download GameData from Cloudflare R2
        if: ${{ steps.cache-gamedata.outputs.cache-hit != 'true' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          AWS_ENDPOINT_URL: ${{ secrets.R2_ENDPOINT_URL }}
          EXPECTED_HASH: "3BE86F84B1E771BEA01BD2DBA39442683381AE4401716E9AE9D4AD95C8F45372"
        shell: pwsh
        run: |
          Write-Host "Downloading GameData" -ForegroundColor Cyan
          #aws s3 cp s3://github-ci/zh_gamedata_no_audio.7z zh_gamedata_no_audio.7z --endpoint-url $env:AWS_ENDPOINT_URL
          Invoke-WebRequest -Uri "https://gadgetpack.net/stuff/gen_gamedata_trimmed.7z" -OutFile "gen_gamedata_trimmed.7z"

          Write-Host "Verifying File Integrity" -ForegroundColor Cyan
          $fileHash = (Get-FileHash -Path gen_gamedata_trimmed.7z -Algorithm SHA256).Hash
          Write-Host "Downloaded file SHA256: $fileHash"
          Write-Host "Expected file SHA256: $env:EXPECTED_HASH"
          if ($fileHash -ne $env:EXPECTED_HASH) {
              Write-Error "Hash verification failed! File may be corrupted or tampered with."
              exit 1
          }

          Write-Host "Extracting Archive" -ForegroundColor Cyan
          & 7z x gen_gamedata_trimmed.7z -oC:\GameData
          Remove-Item gen_gamedata_trimmed.7z -Verbose

      - name: Set Up GameData
        shell: pwsh
        run: |
          $source = "C:\GameData\GeneralsMD"
          $destination = "build"
          Get-ChildItem -Path $source | Copy-Item -Destination $destination

      - name: Set Generals InstallPath in Registry
        shell: pwsh
        run: |
          # Zero Hour loads some Generals files and needs this registry key to find the
          # Generals data files.
          $regPath = "HKCU:\SOFTWARE\Electronic Arts\EA Games\Generals"
          $installPath = "C:\GameData\Generals\"

          # Ensure the key exists
          if (-not (Test-Path $regPath)) {
            Write-Host "Registry key not yet there: $regPath"
            New-Item -Path $regPath -Force | Out-Null
          }

          # Set the InstallPath value
          Set-ItemProperty -Path $regPath -Name InstallPath -Value $installPath -Type String

          Write-Host "Registry key set: $regPath -> InstallPath = $installPath"

      - name: Move Replay files to correct folder
        shell: pwsh
        run: |
          $source = "GeneralsMD\Replays"
          $destination = "$env:USERPROFILE\Documents\Command and Conquer Generals Zero Hour\Replays"

          New-Item -ItemType Directory -Path $destination -Force | Out-Null
          Get-ChildItem -Path $source -File | Move-Item -Destination $destination
      
      #- name: Run Replay Compatibility Tests
      #  shell: pwsh
      #  run: |
      #    $exePath = "build\generalszh.exe"
#
      #    Write-Host "Checking if executable exists at: $exePath"
      #    if (-not (Test-Path $exePath)) {
      #        Write-Host "ERROR: Executable not found at $exePath"
      #        exit 1
      #    }
#
      #    $process = Start-Process -FilePath $exePath -ArgumentList "-jobs -1 -headless -replay *.rep" -Wait -PassThru
      #    $exitCode = $process.ExitCode
#
      #    # Handle non-zero exit code
      #    if ($exitCode -ne 0) {
      #        Write-Host "Process failed with exit code $exitCode"
      #        throw "Executable failed with exit code $exitCode"
      #    }

      - name: Run Replay Compatibility Tests
        shell: pwsh
        run: |
          $exePath = "build/generalszh.exe"
          #$arguments = "-jobs -1 -headless -replay 00vs2019_debug_short.rep"
          $arguments = "-jobs -1 -headless -replay 05-01-50_2v2_amoor123_beshr_HardAI_HardAI.rep"
          $timeoutSeconds = 60
          $stdoutPath = "stdout.log"
          $stderrPath = "stderr.log"

          if (-not (Test-Path $exePath)) {
              Write-Host "ERROR: Executable not found at $exePath"
              exit 1
          }

          # Note that the game is a gui application. That means we need to redirect console output to a file
          # in order to see it.

          # Clean previous logs
          Remove-Item $stdoutPath, $stderrPath -ErrorAction SilentlyContinue

          Write-Host "bla1"
          # Start the process
          $process = Start-Process -FilePath $exePath `
              -ArgumentList $arguments `
              -RedirectStandardOutput $stdoutPath `
              -RedirectStandardError $stderrPath `
              -PassThru
          Write-Host "bla2"
          #$handle = $proc.Handle # cache proc.Handle

          # Wait with timeout
          $exited = $process.WaitForExit($timeoutSeconds * 1000)
          Write-Host "bla3"

          if (-not $exited) {
              Write-Host "ERROR: Process timed out after $timeoutSeconds seconds. Killing process..."
              Stop-Process -Id $process.Id -Force
          }

          # Read output
          Write-Host "=== STDOUT ==="
          Get-Content $stdoutPath

          if ((Test-Path $stderrPath) -and (Get-Item $stderrPath).Length -gt 0) {
              Write-Host "`n=== STDERR ==="
              Get-Content $stderrPath
          }

          if (-not $exited) {
              exit 1
          }

          # Check exit code
          #$exitCode = $process.ExitCode # This doesn't work, Powershell is so stupid (see https://stackoverflow.com/a/16018287)
          $process.HasExited | Out-Null # Needs to be called for the command below to work correctly
          # This will get out the actual exit code of the process
          $exitCode = $process.GetType().GetField('exitCode', 'NonPublic, Instance').GetValue($process)

          if ($exitCode -ne 0) {
              Write-Host "ERROR: Process failed with exit code $exitCode"
              exit $exitCode
          }

          Write-Host "Success!"


      - name: List All Files in Directory (Recursive)
        if: always()
        shell: pwsh
        run: |
          $dir = "."
          Write-Host "Listing all files in $dir recursively:"
          Get-ChildItem -Path $dir -Recurse -File | ForEach-Object {
            Write-Host $_.FullName
          }

      - name: List All Files in Directory (C:\GameData)
        if: always()
        shell: pwsh
        run: |
          $dir = "C:\GameData"
          Write-Host "Listing all files in $dir recursively:"
          Get-ChildItem -Path $dir -Recurse -File | ForEach-Object {
            Write-Host $_.FullName
          }

      - name: Upload Replay Test Log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Replay-Test-Log-${{ matrix.preset }}
          path: build/DebugLogFile*.txt

      - name: Upload Replay Test Log2
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: stdout.log-${{ matrix.preset }}
          path: stdout.log