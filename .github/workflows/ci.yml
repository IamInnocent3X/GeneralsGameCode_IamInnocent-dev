name: GenCI

permissions:
  contents: read
  pull-requests: write

on:
  #push:
  #  branches:
  #    - main
  #    - ci-replays
  pull_request:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  detect-changes:
    name: Detect File Changes
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      generals: ${{ steps.filter.outputs.generals }}
      generalsmd: ${{ steps.filter.outputs.generalsmd }}
      shared: ${{ steps.filter.outputs.shared }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Filter Changed Paths
        uses: dorny/paths-filter@v3
        id: filter
        with:
          token: ''
          filters: |
            generals:
              - 'Generals/**'
            generalsmd:
              - 'GeneralsMD/**'
            shared:
              - '.github/workflows/**'
              - 'CMakeLists.txt'
              - 'CMakePresets.json'
              - 'cmake/**'
              - 'Core/**'
              - 'Dependencies/**'

      - name: Changes Summary
        run: |
          echo "### 🔍 File Changes Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Generals: ${{ steps.filter.outputs.generals == 'true' && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
          echo "- GeneralsMD: ${{ steps.filter.outputs.generalsmd == 'true' && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Shared: ${{ steps.filter.outputs.shared == 'true' && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY

  build-generals:
    name: Build Generals${{ matrix.preset && '' }}
    needs: detect-changes
    if: ${{ 'false' == 'true' }}
    #if: ${{ github.event_name == 'workflow_dispatch' || needs.detect-changes.outputs.generals == 'true' || needs.detect-changes.outputs.shared == 'true' }}
    strategy:
      matrix:
        include:
          # - preset: "vc6"
          #   tools: true
          #   extras: true
          # - preset: "vc6-profile"
          #   tools: true
          #   extras: true
          # - preset: "vc6-debug"
          #   tools: true
          #   extras: true
          - preset: "win32"
            tools: true
            extras: true
          - preset: "win32-profile"
            tools: true
            extras: true
          - preset: "win32-debug"
            tools: true
            extras: true
          # vcpkg builds have been disabled for now due to excessive build times of 30 minutes per preset
          # - preset: "win32-vcpkg"
          #   tools: true
          #   extras: true
          # - preset: "win32-vcpkg-profile"
          #   tools: true
          #   extras: true
          # - preset: "win32-vcpkg-debug"
          #   tools: true
          #   extras: true
      fail-fast: false
    uses: ./.github/workflows/build-toolchain.yml
    with:
      game: "Generals"
      preset: ${{ matrix.preset }}
      tools: ${{ matrix.tools }}
      extras: ${{ matrix.extras }}
    secrets: inherit

  build-generalsmd:
    name: Build GeneralsMD
    needs: detect-changes
    if: ${{ github.event_name == 'workflow_dispatch' || needs.detect-changes.outputs.generalsmd == 'true' || needs.detect-changes.outputs.shared == 'true' }}
    strategy:
      matrix:
        include:
          - preset: "vc6"
            tools: false
            extras: false
          #- preset: "vc6-profile"
          #  tools: true
          #  extras: true
          - preset: "vc6-debug"
            tools: false
            extras: false
          #- preset: "win32"
          #  tools: true
          #  extras: true
          #- preset: "win32-profile"
          #  tools: true
          #  extras: true
          #- preset: "win32-debug"
          #  tools: true
          #  extras: true
          #- preset: "win32-debuglog"
          #  tools: true
          #  extras: true
          # vcpkg builds have been disabled for now due to excessive build times of 30 minutes per preset
          # - preset: "win32-vcpkg"
          #   tools: true
          #   extras: true
          # - preset: "win32-vcpkg-profile"
          #   tools: true
          #   extras: true
          # - preset: "win32-vcpkg-debug"
          #   tools: true
          #   extras: true
      fail-fast: false
    uses: ./.github/workflows/build-toolchain.yml
    with:
      game: "GeneralsMD"
      preset: ${{ matrix.preset }}
      tools: ${{ matrix.tools }}
      extras: ${{ matrix.extras }}
    secrets: inherit

  replay-test:
    name: Replay Compatibility Test (${{ matrix.preset }})
    needs: build-generalsmd
    if: ${{ github.event_name == 'workflow_dispatch' || needs.detect-changes.outputs.generalsmd == 'true' || needs.detect-changes.outputs.shared == 'true' }}
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - preset: "vc6"
            tools: false
            extras: false
          - preset: "vc6-debug"
            tools: false
            extras: false
      fail-fast: false
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Game Artifact
        uses: actions/download-artifact@v4
        with:
          name: GeneralsMD-${{ matrix.preset }}+t+e
          path: build

      - name: Cache GameDataMD files
        id: cache-gamedata-md
        uses: actions/cache@v4
        with:
          path: C:\GameDataMD
          key: gamedata-md-permanent-cache-v42

      - name: Download GameDataMD from Cloudflare R2
        if: ${{ steps.cache-gamedata-md.outputs.cache-hit != 'true' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          AWS_ENDPOINT_URL: ${{ secrets.R2_ENDPOINT_URL }}
          EXPECTED_HASH: "CA2D4C614B6C2EF1692A3ADC3F1E07B5620A151AF333E1821271AE00352E464D"
        shell: pwsh
        run: |
          Write-Host "Downloading GameDataMD" -ForegroundColor Cyan
          aws s3 cp s3://github-ci/zh_gamedata_no_audio.7z zh_gamedata_no_audio.7z --endpoint-url $env:AWS_ENDPOINT_URL

          Write-Host "Verifying File Integrity" -ForegroundColor Cyan
          $fileHash = (Get-FileHash -Path zh_gamedata_no_audio.7z -Algorithm SHA256).Hash
          Write-Host "Downloaded file SHA256: $fileHash"
          Write-Host "Expected file SHA256: $env:EXPECTED_HASH"
          if ($fileHash -ne $env:EXPECTED_HASH) {
              Write-Error "Hash verification failed! File may be corrupted or tampered with."
              exit 1
          }

          Write-Host "Extracting Archive" -ForegroundColor Cyan
          & 7z x zh_gamedata_no_audio.7z -oC:\GameDataMD
          Remove-Item zh_gamedata_no_audio.7z -Verbose

      - name: Set Up GameDataMD
        shell: pwsh
        run: |
          $source = "C:\GameDataMD"
          $destination = "build"
          Get-ChildItem -Path $source -File | Move-Item -Destination $destination

      - name: List All Files in Directory (Recursive)
        shell: pwsh
        run: |
          $dir = "."
          Write-Host "Listing all files in $dir recursively:"
          Get-ChildItem -Path $dir -Recurse -File | ForEach-Object {
            Write-Host $_.FullName
          }

      - name: Move Replay files to correct folder
        shell: pwsh
        run: |
          $source = "GeneralsMD\Replays"
          $destination = "$env:USERPROFILE\Documents\Command and Conquer Generals Zero Hour\Replays"

          New-Item -ItemType Directory -Path $destination -Force | Out-Null
          Get-ChildItem -Path $source -File | Move-Item -Destination $destination
      
      #- name: Run Replay Compatibility Tests
      #  shell: pwsh
      #  run: |
      #    $exePath = "build\generalszh.exe"
#
      #    Write-Host "Checking if executable exists at: $exePath"
      #    if (-not (Test-Path $exePath)) {
      #        Write-Host "ERROR: Executable not found at $exePath"
      #        exit 1
      #    }
#
      #    $process = Start-Process -FilePath $exePath -ArgumentList "-jobs 2 -headless -replay *.rep" -Wait -PassThru
      #    $exitCode = $process.ExitCode
#
      #    # Handle non-zero exit code
      #    if ($exitCode -ne 0) {
      #        Write-Host "Process failed with exit code $exitCode"
      #        throw "Executable failed with exit code $exitCode"
      #    }

      - name: Run Replay Compatibility Tests
        shell: pwsh
        run: |
          $exePath = "build\generalszh.exe"
          $logPath = "replay_test_output.txt"
          $timeoutSeconds = 60

          Write-Host "Checking if executable exists at: $exePath"
          if (-not (Test-Path $exePath)) {
              Write-Host "ERROR: Executable not found at $exePath"
              exit 1
          }

          Write-Host "Starting executable and redirecting output to $logPath"
          $startInfo = New-Object System.Diagnostics.ProcessStartInfo
          $startInfo.FileName = $exePath
          $startInfo.Arguments = "-jobs 2 -headless -replay *.rep"
          $startInfo.RedirectStandardOutput = $true
          $startInfo.RedirectStandardError = $true
          $startInfo.UseShellExecute = $false

          $process = New-Object System.Diagnostics.Process
          $process.StartInfo = $startInfo

          $process.Start() | Out-Null

          # Async read output while waiting (prevents hanging on long stdout)
          $stdoutJob = Start-Job { param($p) $p.StandardOutput.ReadToEnd() } -ArgumentList $process
          $stderrJob = Start-Job { param($p) $p.StandardError.ReadToEnd() } -ArgumentList $process

          Write-Host "Waiting up to $timeoutSeconds seconds for the process to finish"
          if (-not $process.WaitForExit($timeoutSeconds * 1000)) {
              Write-Host "ERROR: Process exceeded $timeoutSeconds second timeout. Killing it."
              $process.Kill()
              $timedOut = $true
          } else {
              $timedOut = $false
          }

          $stdout = Receive-Job $stdoutJob
          $stderr = Receive-Job $stderrJob

          Remove-Job $stdoutJob, $stderrJob

          $stdout | Out-File -FilePath $logPath -Encoding utf8
          if ($stderr) {
              "`n=== STDERR ===`n" | Out-File -FilePath $logPath -Append -Encoding utf8
              $stderr | Out-File -FilePath $logPath -Append -Encoding utf8
          }

          if ($timedOut) {
              Write-Host "ERROR: Replay test timed out after $timeoutSeconds seconds"
              exit 1
          }

          $exitCode = $process.ExitCode
          if ($exitCode -ne 0) {
              Write-Host "Executable failed with exit code $exitCode"
              exit $exitCode
          }
      - name: Upload Replay Test Log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Replay-Test-Log-${{ matrix.preset }}
          path: replay_test_output.txt
